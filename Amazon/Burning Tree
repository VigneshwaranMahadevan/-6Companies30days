class Solution {
  public:
    
    int findAns(map<Node*,Node*> &parent,Node* targetNode){
        queue<Node*> q;
        q.push(targetNode);
        map<Node*,int> vis;
        vis[targetNode] = 1;
        int maxi=0;
        
        while(!q.empty()){
            int size = q.size();
            int flag=0;
            
            for(int i=0;i<size;i++){
                Node* node = q.front();q.pop();
            
                if(node->left && !vis[node->left]){
                    flag=1;
                    vis[node->left]=1;
                    q.push(node->left);
                }
                
                if(node->right && !vis[node->right]){
                    flag=1;
                    vis[node->right]=1;
                    q.push(node->right);
                }
                
                if(parent[node] && !vis[parent[node]]){
                    flag=1;
                    vis[parent[node]]=1;
                    q.push(parent[node]);
                }
            }
            if(flag) maxi++;
        }
        
        return maxi;
    }
    
    Node* mapParents(Node* root, map<Node*,Node*> &parent,int target){
        queue<Node*> q;
        q.push(root);
        Node* res;
        while(!q.empty()){
            Node* top = q.front(); q.pop();
            if(top->data == target) res=top;
            if(top->left){
                parent[top->left] = top;
                q.push(top->left);
            }
            if(top->right){
                parent[top->right] = top;
                q.push(top->right);
            }
        }
        return res;
    }
    
    int minTime(Node* root, int target) 
    {
        map<Node*,Node*> parent;
        Node* targetNode = mapParents(root,parent,target);
        int ans = findAns(parent,targetNode);
        return ans;
    }
};
