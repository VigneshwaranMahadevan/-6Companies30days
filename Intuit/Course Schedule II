class Solution {
public:
    vector<int> findOrder(int n, vector<vector<int>>& edge) {
        vector<vector<int>> graph(n,vector<int>());
        vector<int> indegree(n,0);
        for(auto e:edge){
            graph[e[1]].push_back(e[0]);
            indegree[e[0]]++;
        }
        vector<int> res;
        queue<int> q;
        for(int i=0;i<n;i++)
            if(indegree[i]==0)
                q.push(i);
        while(!q.empty()){
            //node is n
            //cout<<n<<" ";
            int n=q.front();q.pop();
            res.push_back(n);
            for(auto node:graph[n]){
                //cout<<node<<" "; cout<<endl;
                indegree[node]--;
                if(indegree[node]==0)
                    q.push(node);
            }
            
        }
        return res.size()==n ?  res : vector<int> ();
    }
};
