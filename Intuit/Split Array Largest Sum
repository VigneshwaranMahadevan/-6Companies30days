class Solution {
public:
    
    int memo[1001][51];
    
    int func(vector<int>& prefixSum,int currIdx,int subarrCnt){
        int n = prefixSum.size()-1;
        
        if(memo[currIdx][subarrCnt]!=-1)
            return memo[currIdx][subarrCnt];
        
        if(subarrCnt == 1) 
            return memo[currIdx][subarrCnt] = prefixSum[n] - prefixSum[currIdx];
        
        int ans = INT_MAX;
        int minimumLargestSplitSum = INT_MAX;
        
        for(int i=currIdx;i<=n-subarrCnt;i++){
            int firstSplitSum = prefixSum[i + 1] - prefixSum[currIdx];
            int largestSplitSum = max(firstSplitSum,func(prefixSum, i + 1, subarrCnt - 1));
            minimumLargestSplitSum = min(minimumLargestSplitSum, largestSplitSum);
            
        }
        
        return memo[currIdx][subarrCnt] = minimumLargestSplitSum;
    }
    
    int splitArray(vector<int>& nums, int m) {
        memset(memo,-1,sizeof(memo));
        int n = nums.size();
        vector<int> prefixSum(n+1,0);
        for(int i=0;i<n;i++)
            prefixSum[i+1] = prefixSum[i]+nums[i];
        
        return func(prefixSum,0,m);
    }
};
