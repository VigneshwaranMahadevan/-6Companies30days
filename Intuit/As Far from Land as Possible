class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        queue<pair<int,int>> q;
        int cnt=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    q.push({i,j});
                    cnt++;
                }
            }
        }
        if(cnt==m*n || cnt==0) return -1;
        int steps=0;
        while(!q.empty()){
            int size=q.size();
            //cout<<steps<<endl;
            for(int i=0;i<size;i++){

                int a = q.front().first;
                int b = q.front().second;
              //  cout<<a<<b<<endl;
                q.pop();
                if(a-1>=0 && grid[a-1][b]==0) {q.push({a-1,b}); grid[a-1][b]=1;}
                if(a+1<m && grid[a+1][b]==0) {q.push({a+1,b}); grid[a+1][b]=1;}
                if(b-1>=0 && grid[a][b-1]==0) {q.push({a,b-1}); grid[a][b-1]=1;}
                if(b+1<n && grid[a][b+1]==0) {q.push({a,b+1}); grid[a][b+1]=1;}
            }
            steps++;
        }
        return steps-1;
    }
};
